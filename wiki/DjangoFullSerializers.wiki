#summary Documentation and examples for the Wad of stuff Django Full Serializers
#labels Featured,Phase-Implementation

<wiki:toc />

=Introduction=

The wadofstuff.django.serializers python modules adds 3 new parameters. The modules currently support serializing to JSON and Python only.

  * excludes - a list of fields to be excluded from serialization. The excludes list takes precedence over the fields argument.

  * extras - a list of non-model field properties or callables to be serialized. Callables cannot be passed arguments.

  * relations - a list or dictionary of model related fields to be followed and serialized.

=Source=

[http://wadofstuff.googlecode.com/svn/trunk/python/django/serializers Django Full Serializers]

=Examples=

==Backwards Compatibility==
{{{
>>> from django.contrib.auth.models import Group
>>> from django.core import serializers
>>> print serializers.serialize('json', Group.objects.all(), indent=4)
[
    {
        "pk": 2,
        "model": "auth.group",
        "fields": {
            "name": "session",
            "permissions": [
                19
            ]
        }
    }
]
}}}

==Excludes==

{{{
>>> print serializers.serialize('json', Group.objects.all(), indent=4, excludes=('permissions',))
[
    {
        "pk": 2,
        "model": "auth.group",
        "fields": {
            "name": "session"
        }
    }
]
}}}

==Extras==

In this example I monkey patch the `Group` model to have a `get_absolute_url()` method to demonstrate the extras feature.

{{{
>>> def get_absolute_url(self):
...     return u'/group/%s' % self.name
...
>>> Group.get_absolute_url = get_absolute_url
>>> print serializers.serialize('json', Group.objects.all(), indent=4, extras=('__unicode__','get_absolute_url'))
[
    {
        "pk": 2,
        "model": "auth.group",
        "extras": {
            "get_absolute_url": "/group/session",
            "__unicode__": "session"
        },
        "fields": {
            "name": "session",
            "permissions": [
                19
            ]
        }
    }
]
}}}

==Relations==

The wadofstuff serializers allow you to follow related fields of a model to any depth you wish and serialize those as well. This is why it is considered a "full serializer" as opposed to Django's built-in serializers that only provide the related fields primary key value.

When using the relations argument to the serializer you may specify either a list of fields to be serialized or a dictionary of key/value pairs. The dictionary keys are the field names of related fields to be serialized and the values are the arguments to pass to the serializer when serializing that field.

{{{
>>> print serializers.serialize('json', Group.objects.all(), indent=4, relations=('permissions',))
[
    {
        "pk": 2,
        "model": "auth.group",
        "fields": {
            "name": "session",
            "permissions": [
                {
                    "pk": 19,
                    "model": "auth.permission",
                    "fields": {
                        "codename": "add_session",
                        "name": "Can add session",
                        "content_type": 7
                    }
                }
            ]
        }
    }
]
}}}

===Only serializing a particular field of a relation===

{{{
>>> print serializers.serialize('json', Group.objects.all(), indent=4, relations={'permissions':{'fields':('codename',)}})
[
    {
        "pk": 2,
        "model": "auth.group",
        "fields": {
            "name": "session",
            "permissions": [
                {
                    "pk": 19,
                    "model": "auth.permission",
                    "fields": {
                        "codename": "add_session"
                    }
                }
            ]
        }
    }
]
}}}

===Serializing a relation of a relation===

{{{
>>> print serializers.serialize('json', Group.objects.all(), indent=4, relations={'permissions':{'relations':('content_type',)}})
[
    {
        "pk": 2,
        "model": "auth.group",
        "fields": {
            "name": "session",
            "permissions": [
                {
                    "pk": 19,
                    "model": "auth.permission",
                    "fields": {
                        "codename": "add_session",
                        "name": "Can add session",
                        "content_type": {
                            "pk": 7,
                            "model": "contenttypes.contenttype",
                            "fields": {
                                "model": "session",
                                "name": "session",
                                "app_label": "sessions"
                            }
                        }
                    }
                }
            ]
        }
    }
]
}}}

===Excluding a field from a relation of a relation===

{{{
>>> print serializers.serialize('json', Group.objects.all(), indent=4, relations={'permissions':{'relations':{'content_type':{'excludes':('app_label',)}}}})
[
    {
        "pk": 2,
        "model": "auth.group",
        "fields": {
            "name": "session",
            "permissions": [
                {
                    "pk": 19,
                    "model": "auth.permission",
                    "fields": {
                        "codename": "add_session",
                        "name": "Can add session",
                        "content_type": {
                            "pk": 7,
                            "model": "contenttypes.contenttype",
                            "fields": {
                                "model": "session",
                                "name": "session"
                            }
                        }
                    }
                }
            ]
        }
    }
]
}}}